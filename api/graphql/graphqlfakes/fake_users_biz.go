// Code generated by counterfeiter. DO NOT EDIT.
package graphqlfakes

import (
	"context"
	"sync"

	"github.com/classic-massok/classic-massok-be/business/models"
)

type FakeUsersBiz struct {
	AuthnStub        func(context.Context, string, string) (string, map[string]string, error)
	authnMutex       sync.RWMutex
	authnArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	authnReturns struct {
		result1 string
		result2 map[string]string
		result3 error
	}
	authnReturnsOnCall map[int]struct {
		result1 string
		result2 map[string]string
		result3 error
	}
	DeleteStub        func(context.Context, string, string) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	EditStub        func(context.Context, string, string, bool, models.UserEdit) (*models.User, error)
	editMutex       sync.RWMutex
	editArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 bool
		arg5 models.UserEdit
	}
	editReturns struct {
		result1 *models.User
		result2 error
	}
	editReturnsOnCall map[int]struct {
		result1 *models.User
		result2 error
	}
	GetStub        func(context.Context, string) (*models.User, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getReturns struct {
		result1 *models.User
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 *models.User
		result2 error
	}
	GetAllStub        func(context.Context) ([]*models.User, error)
	getAllMutex       sync.RWMutex
	getAllArgsForCall []struct {
		arg1 context.Context
	}
	getAllReturns struct {
		result1 []*models.User
		result2 error
	}
	getAllReturnsOnCall map[int]struct {
		result1 []*models.User
		result2 error
	}
	NewStub        func(context.Context, string, string, models.User) (string, error)
	newMutex       sync.RWMutex
	newArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 models.User
	}
	newReturns struct {
		result1 string
		result2 error
	}
	newReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUsersBiz) Authn(arg1 context.Context, arg2 string, arg3 string) (string, map[string]string, error) {
	fake.authnMutex.Lock()
	ret, specificReturn := fake.authnReturnsOnCall[len(fake.authnArgsForCall)]
	fake.authnArgsForCall = append(fake.authnArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.AuthnStub
	fakeReturns := fake.authnReturns
	fake.recordInvocation("Authn", []interface{}{arg1, arg2, arg3})
	fake.authnMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeUsersBiz) AuthnCallCount() int {
	fake.authnMutex.RLock()
	defer fake.authnMutex.RUnlock()
	return len(fake.authnArgsForCall)
}

func (fake *FakeUsersBiz) AuthnCalls(stub func(context.Context, string, string) (string, map[string]string, error)) {
	fake.authnMutex.Lock()
	defer fake.authnMutex.Unlock()
	fake.AuthnStub = stub
}

func (fake *FakeUsersBiz) AuthnArgsForCall(i int) (context.Context, string, string) {
	fake.authnMutex.RLock()
	defer fake.authnMutex.RUnlock()
	argsForCall := fake.authnArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeUsersBiz) AuthnReturns(result1 string, result2 map[string]string, result3 error) {
	fake.authnMutex.Lock()
	defer fake.authnMutex.Unlock()
	fake.AuthnStub = nil
	fake.authnReturns = struct {
		result1 string
		result2 map[string]string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeUsersBiz) AuthnReturnsOnCall(i int, result1 string, result2 map[string]string, result3 error) {
	fake.authnMutex.Lock()
	defer fake.authnMutex.Unlock()
	fake.AuthnStub = nil
	if fake.authnReturnsOnCall == nil {
		fake.authnReturnsOnCall = make(map[int]struct {
			result1 string
			result2 map[string]string
			result3 error
		})
	}
	fake.authnReturnsOnCall[i] = struct {
		result1 string
		result2 map[string]string
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeUsersBiz) Delete(arg1 context.Context, arg2 string, arg3 string) error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.DeleteStub
	fakeReturns := fake.deleteReturns
	fake.recordInvocation("Delete", []interface{}{arg1, arg2, arg3})
	fake.deleteMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUsersBiz) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeUsersBiz) DeleteCalls(stub func(context.Context, string, string) error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *FakeUsersBiz) DeleteArgsForCall(i int) (context.Context, string, string) {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	argsForCall := fake.deleteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeUsersBiz) DeleteReturns(result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUsersBiz) DeleteReturnsOnCall(i int, result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUsersBiz) Edit(arg1 context.Context, arg2 string, arg3 string, arg4 bool, arg5 models.UserEdit) (*models.User, error) {
	fake.editMutex.Lock()
	ret, specificReturn := fake.editReturnsOnCall[len(fake.editArgsForCall)]
	fake.editArgsForCall = append(fake.editArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 bool
		arg5 models.UserEdit
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.EditStub
	fakeReturns := fake.editReturns
	fake.recordInvocation("Edit", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.editMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUsersBiz) EditCallCount() int {
	fake.editMutex.RLock()
	defer fake.editMutex.RUnlock()
	return len(fake.editArgsForCall)
}

func (fake *FakeUsersBiz) EditCalls(stub func(context.Context, string, string, bool, models.UserEdit) (*models.User, error)) {
	fake.editMutex.Lock()
	defer fake.editMutex.Unlock()
	fake.EditStub = stub
}

func (fake *FakeUsersBiz) EditArgsForCall(i int) (context.Context, string, string, bool, models.UserEdit) {
	fake.editMutex.RLock()
	defer fake.editMutex.RUnlock()
	argsForCall := fake.editArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeUsersBiz) EditReturns(result1 *models.User, result2 error) {
	fake.editMutex.Lock()
	defer fake.editMutex.Unlock()
	fake.EditStub = nil
	fake.editReturns = struct {
		result1 *models.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUsersBiz) EditReturnsOnCall(i int, result1 *models.User, result2 error) {
	fake.editMutex.Lock()
	defer fake.editMutex.Unlock()
	fake.EditStub = nil
	if fake.editReturnsOnCall == nil {
		fake.editReturnsOnCall = make(map[int]struct {
			result1 *models.User
			result2 error
		})
	}
	fake.editReturnsOnCall[i] = struct {
		result1 *models.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUsersBiz) Get(arg1 context.Context, arg2 string) (*models.User, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetStub
	fakeReturns := fake.getReturns
	fake.recordInvocation("Get", []interface{}{arg1, arg2})
	fake.getMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUsersBiz) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeUsersBiz) GetCalls(stub func(context.Context, string) (*models.User, error)) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *FakeUsersBiz) GetArgsForCall(i int) (context.Context, string) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUsersBiz) GetReturns(result1 *models.User, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 *models.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUsersBiz) GetReturnsOnCall(i int, result1 *models.User, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 *models.User
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 *models.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUsersBiz) GetAll(arg1 context.Context) ([]*models.User, error) {
	fake.getAllMutex.Lock()
	ret, specificReturn := fake.getAllReturnsOnCall[len(fake.getAllArgsForCall)]
	fake.getAllArgsForCall = append(fake.getAllArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.GetAllStub
	fakeReturns := fake.getAllReturns
	fake.recordInvocation("GetAll", []interface{}{arg1})
	fake.getAllMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUsersBiz) GetAllCallCount() int {
	fake.getAllMutex.RLock()
	defer fake.getAllMutex.RUnlock()
	return len(fake.getAllArgsForCall)
}

func (fake *FakeUsersBiz) GetAllCalls(stub func(context.Context) ([]*models.User, error)) {
	fake.getAllMutex.Lock()
	defer fake.getAllMutex.Unlock()
	fake.GetAllStub = stub
}

func (fake *FakeUsersBiz) GetAllArgsForCall(i int) context.Context {
	fake.getAllMutex.RLock()
	defer fake.getAllMutex.RUnlock()
	argsForCall := fake.getAllArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeUsersBiz) GetAllReturns(result1 []*models.User, result2 error) {
	fake.getAllMutex.Lock()
	defer fake.getAllMutex.Unlock()
	fake.GetAllStub = nil
	fake.getAllReturns = struct {
		result1 []*models.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUsersBiz) GetAllReturnsOnCall(i int, result1 []*models.User, result2 error) {
	fake.getAllMutex.Lock()
	defer fake.getAllMutex.Unlock()
	fake.GetAllStub = nil
	if fake.getAllReturnsOnCall == nil {
		fake.getAllReturnsOnCall = make(map[int]struct {
			result1 []*models.User
			result2 error
		})
	}
	fake.getAllReturnsOnCall[i] = struct {
		result1 []*models.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUsersBiz) New(arg1 context.Context, arg2 string, arg3 string, arg4 models.User) (string, error) {
	fake.newMutex.Lock()
	ret, specificReturn := fake.newReturnsOnCall[len(fake.newArgsForCall)]
	fake.newArgsForCall = append(fake.newArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 models.User
	}{arg1, arg2, arg3, arg4})
	stub := fake.NewStub
	fakeReturns := fake.newReturns
	fake.recordInvocation("New", []interface{}{arg1, arg2, arg3, arg4})
	fake.newMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUsersBiz) NewCallCount() int {
	fake.newMutex.RLock()
	defer fake.newMutex.RUnlock()
	return len(fake.newArgsForCall)
}

func (fake *FakeUsersBiz) NewCalls(stub func(context.Context, string, string, models.User) (string, error)) {
	fake.newMutex.Lock()
	defer fake.newMutex.Unlock()
	fake.NewStub = stub
}

func (fake *FakeUsersBiz) NewArgsForCall(i int) (context.Context, string, string, models.User) {
	fake.newMutex.RLock()
	defer fake.newMutex.RUnlock()
	argsForCall := fake.newArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeUsersBiz) NewReturns(result1 string, result2 error) {
	fake.newMutex.Lock()
	defer fake.newMutex.Unlock()
	fake.NewStub = nil
	fake.newReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeUsersBiz) NewReturnsOnCall(i int, result1 string, result2 error) {
	fake.newMutex.Lock()
	defer fake.newMutex.Unlock()
	fake.NewStub = nil
	if fake.newReturnsOnCall == nil {
		fake.newReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.newReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeUsersBiz) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.authnMutex.RLock()
	defer fake.authnMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.editMutex.RLock()
	defer fake.editMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.getAllMutex.RLock()
	defer fake.getAllMutex.RUnlock()
	fake.newMutex.RLock()
	defer fake.newMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUsersBiz) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
