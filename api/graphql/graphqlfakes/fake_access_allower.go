// Code generated by counterfeiter. DO NOT EDIT.
package graphqlfakes

import (
	"context"
	"sync"

	"github.com/classic-massok/classic-massok-be/business/models"
)

type FakeAccessAllower struct {
	AccessAllowedStub        func(context.Context, interface{}, string, string, models.Roles) (bool, error)
	accessAllowedMutex       sync.RWMutex
	accessAllowedArgsForCall []struct {
		arg1 context.Context
		arg2 interface{}
		arg3 string
		arg4 string
		arg5 models.Roles
	}
	accessAllowedReturns struct {
		result1 bool
		result2 error
	}
	accessAllowedReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAccessAllower) AccessAllowed(arg1 context.Context, arg2 interface{}, arg3 string, arg4 string, arg5 models.Roles) (bool, error) {
	fake.accessAllowedMutex.Lock()
	ret, specificReturn := fake.accessAllowedReturnsOnCall[len(fake.accessAllowedArgsForCall)]
	fake.accessAllowedArgsForCall = append(fake.accessAllowedArgsForCall, struct {
		arg1 context.Context
		arg2 interface{}
		arg3 string
		arg4 string
		arg5 models.Roles
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.AccessAllowedStub
	fakeReturns := fake.accessAllowedReturns
	fake.recordInvocation("AccessAllowed", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.accessAllowedMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAccessAllower) AccessAllowedCallCount() int {
	fake.accessAllowedMutex.RLock()
	defer fake.accessAllowedMutex.RUnlock()
	return len(fake.accessAllowedArgsForCall)
}

func (fake *FakeAccessAllower) AccessAllowedCalls(stub func(context.Context, interface{}, string, string, models.Roles) (bool, error)) {
	fake.accessAllowedMutex.Lock()
	defer fake.accessAllowedMutex.Unlock()
	fake.AccessAllowedStub = stub
}

func (fake *FakeAccessAllower) AccessAllowedArgsForCall(i int) (context.Context, interface{}, string, string, models.Roles) {
	fake.accessAllowedMutex.RLock()
	defer fake.accessAllowedMutex.RUnlock()
	argsForCall := fake.accessAllowedArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeAccessAllower) AccessAllowedReturns(result1 bool, result2 error) {
	fake.accessAllowedMutex.Lock()
	defer fake.accessAllowedMutex.Unlock()
	fake.AccessAllowedStub = nil
	fake.accessAllowedReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeAccessAllower) AccessAllowedReturnsOnCall(i int, result1 bool, result2 error) {
	fake.accessAllowedMutex.Lock()
	defer fake.accessAllowedMutex.Unlock()
	fake.AccessAllowedStub = nil
	if fake.accessAllowedReturnsOnCall == nil {
		fake.accessAllowedReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.accessAllowedReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeAccessAllower) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.accessAllowedMutex.RLock()
	defer fake.accessAllowedMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAccessAllower) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
