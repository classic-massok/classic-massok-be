type User {
  id: ID!
  email: String!
  firstName: String!
  lastName: String!
  roles: [String!]
  phone: String
  canSMS: Boolean
  birthday: Time
  createdAt: Time!
  updatedAt: Time!
  createdBy: ID!
  updatedBy: ID!
}

input CreateUserInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  roles: [String!]
  phone: String
  canSMS: Boolean
  birthday: Time
}

type CreateUserOutput {
  id: ID!
}

input UpdateUserInput {
  id: ID!
  email: String
  password: String
  firstName: String
  lastName: String
  roles: [String!]
  phone: String
  canSMS: Boolean
  birthday: Time
}

input DeleteUserInput {
  id: ID!
}

type DeleteUserOutput {
  success: Boolean!
}

input LoginInput {
  email: String!
  password: String!
}

type AuthOutput {
  accessToken: String!
  accessTokenExpiry: Int64!
  refreshToken: String!
  refreshTokenExpiry: Int64!
}

type Query {
  user(id: ID!): User
  users: [User!]
}

type Mutation {
  login(input: LoginInput!): AuthOutput!
  refreshToken: AuthOutput!
  createUser(input: CreateUserInput!): CreateUserOutput!
  updateUser(input: UpdateUserInput!): User!
  deleteUser(input: DeleteUserInput!): DeleteUserOutput!
}

scalar Time
scalar Int64