// Code generated by counterfeiter. DO NOT EDIT.
package businessfakes

import (
	"context"
	"sync"

	cmmongo "github.com/classic-massok/classic-massok-be/data/cm-mongo"
)

type FakeUsersData struct {
	DeleteStub        func(context.Context, string, string) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	EditStub        func(context.Context, string, string, cmmongo.UserEdit) (*cmmongo.User, error)
	editMutex       sync.RWMutex
	editArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 cmmongo.UserEdit
	}
	editReturns struct {
		result1 *cmmongo.User
		result2 error
	}
	editReturnsOnCall map[int]struct {
		result1 *cmmongo.User
		result2 error
	}
	GetStub        func(context.Context, string) (*cmmongo.User, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getReturns struct {
		result1 *cmmongo.User
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 *cmmongo.User
		result2 error
	}
	GetAllStub        func(context.Context) ([]*cmmongo.User, error)
	getAllMutex       sync.RWMutex
	getAllArgsForCall []struct {
		arg1 context.Context
	}
	getAllReturns struct {
		result1 []*cmmongo.User
		result2 error
	}
	getAllReturnsOnCall map[int]struct {
		result1 []*cmmongo.User
		result2 error
	}
	GetByEmailStub        func(context.Context, string) (*cmmongo.User, error)
	getByEmailMutex       sync.RWMutex
	getByEmailArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getByEmailReturns struct {
		result1 *cmmongo.User
		result2 error
	}
	getByEmailReturnsOnCall map[int]struct {
		result1 *cmmongo.User
		result2 error
	}
	NewStub        func(context.Context, string, cmmongo.User) (string, error)
	newMutex       sync.RWMutex
	newArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 cmmongo.User
	}
	newReturns struct {
		result1 string
		result2 error
	}
	newReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUsersData) Delete(arg1 context.Context, arg2 string, arg3 string) error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.DeleteStub
	fakeReturns := fake.deleteReturns
	fake.recordInvocation("Delete", []interface{}{arg1, arg2, arg3})
	fake.deleteMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeUsersData) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeUsersData) DeleteCalls(stub func(context.Context, string, string) error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *FakeUsersData) DeleteArgsForCall(i int) (context.Context, string, string) {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	argsForCall := fake.deleteArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeUsersData) DeleteReturns(result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeUsersData) DeleteReturnsOnCall(i int, result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeUsersData) Edit(arg1 context.Context, arg2 string, arg3 string, arg4 cmmongo.UserEdit) (*cmmongo.User, error) {
	fake.editMutex.Lock()
	ret, specificReturn := fake.editReturnsOnCall[len(fake.editArgsForCall)]
	fake.editArgsForCall = append(fake.editArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 cmmongo.UserEdit
	}{arg1, arg2, arg3, arg4})
	stub := fake.EditStub
	fakeReturns := fake.editReturns
	fake.recordInvocation("Edit", []interface{}{arg1, arg2, arg3, arg4})
	fake.editMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUsersData) EditCallCount() int {
	fake.editMutex.RLock()
	defer fake.editMutex.RUnlock()
	return len(fake.editArgsForCall)
}

func (fake *FakeUsersData) EditCalls(stub func(context.Context, string, string, cmmongo.UserEdit) (*cmmongo.User, error)) {
	fake.editMutex.Lock()
	defer fake.editMutex.Unlock()
	fake.EditStub = stub
}

func (fake *FakeUsersData) EditArgsForCall(i int) (context.Context, string, string, cmmongo.UserEdit) {
	fake.editMutex.RLock()
	defer fake.editMutex.RUnlock()
	argsForCall := fake.editArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeUsersData) EditReturns(result1 *cmmongo.User, result2 error) {
	fake.editMutex.Lock()
	defer fake.editMutex.Unlock()
	fake.EditStub = nil
	fake.editReturns = struct {
		result1 *cmmongo.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUsersData) EditReturnsOnCall(i int, result1 *cmmongo.User, result2 error) {
	fake.editMutex.Lock()
	defer fake.editMutex.Unlock()
	fake.EditStub = nil
	if fake.editReturnsOnCall == nil {
		fake.editReturnsOnCall = make(map[int]struct {
			result1 *cmmongo.User
			result2 error
		})
	}
	fake.editReturnsOnCall[i] = struct {
		result1 *cmmongo.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUsersData) Get(arg1 context.Context, arg2 string) (*cmmongo.User, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetStub
	fakeReturns := fake.getReturns
	fake.recordInvocation("Get", []interface{}{arg1, arg2})
	fake.getMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUsersData) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeUsersData) GetCalls(stub func(context.Context, string) (*cmmongo.User, error)) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *FakeUsersData) GetArgsForCall(i int) (context.Context, string) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUsersData) GetReturns(result1 *cmmongo.User, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 *cmmongo.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUsersData) GetReturnsOnCall(i int, result1 *cmmongo.User, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 *cmmongo.User
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 *cmmongo.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUsersData) GetAll(arg1 context.Context) ([]*cmmongo.User, error) {
	fake.getAllMutex.Lock()
	ret, specificReturn := fake.getAllReturnsOnCall[len(fake.getAllArgsForCall)]
	fake.getAllArgsForCall = append(fake.getAllArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.GetAllStub
	fakeReturns := fake.getAllReturns
	fake.recordInvocation("GetAll", []interface{}{arg1})
	fake.getAllMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUsersData) GetAllCallCount() int {
	fake.getAllMutex.RLock()
	defer fake.getAllMutex.RUnlock()
	return len(fake.getAllArgsForCall)
}

func (fake *FakeUsersData) GetAllCalls(stub func(context.Context) ([]*cmmongo.User, error)) {
	fake.getAllMutex.Lock()
	defer fake.getAllMutex.Unlock()
	fake.GetAllStub = stub
}

func (fake *FakeUsersData) GetAllArgsForCall(i int) context.Context {
	fake.getAllMutex.RLock()
	defer fake.getAllMutex.RUnlock()
	argsForCall := fake.getAllArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeUsersData) GetAllReturns(result1 []*cmmongo.User, result2 error) {
	fake.getAllMutex.Lock()
	defer fake.getAllMutex.Unlock()
	fake.GetAllStub = nil
	fake.getAllReturns = struct {
		result1 []*cmmongo.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUsersData) GetAllReturnsOnCall(i int, result1 []*cmmongo.User, result2 error) {
	fake.getAllMutex.Lock()
	defer fake.getAllMutex.Unlock()
	fake.GetAllStub = nil
	if fake.getAllReturnsOnCall == nil {
		fake.getAllReturnsOnCall = make(map[int]struct {
			result1 []*cmmongo.User
			result2 error
		})
	}
	fake.getAllReturnsOnCall[i] = struct {
		result1 []*cmmongo.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUsersData) GetByEmail(arg1 context.Context, arg2 string) (*cmmongo.User, error) {
	fake.getByEmailMutex.Lock()
	ret, specificReturn := fake.getByEmailReturnsOnCall[len(fake.getByEmailArgsForCall)]
	fake.getByEmailArgsForCall = append(fake.getByEmailArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetByEmailStub
	fakeReturns := fake.getByEmailReturns
	fake.recordInvocation("GetByEmail", []interface{}{arg1, arg2})
	fake.getByEmailMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUsersData) GetByEmailCallCount() int {
	fake.getByEmailMutex.RLock()
	defer fake.getByEmailMutex.RUnlock()
	return len(fake.getByEmailArgsForCall)
}

func (fake *FakeUsersData) GetByEmailCalls(stub func(context.Context, string) (*cmmongo.User, error)) {
	fake.getByEmailMutex.Lock()
	defer fake.getByEmailMutex.Unlock()
	fake.GetByEmailStub = stub
}

func (fake *FakeUsersData) GetByEmailArgsForCall(i int) (context.Context, string) {
	fake.getByEmailMutex.RLock()
	defer fake.getByEmailMutex.RUnlock()
	argsForCall := fake.getByEmailArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUsersData) GetByEmailReturns(result1 *cmmongo.User, result2 error) {
	fake.getByEmailMutex.Lock()
	defer fake.getByEmailMutex.Unlock()
	fake.GetByEmailStub = nil
	fake.getByEmailReturns = struct {
		result1 *cmmongo.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUsersData) GetByEmailReturnsOnCall(i int, result1 *cmmongo.User, result2 error) {
	fake.getByEmailMutex.Lock()
	defer fake.getByEmailMutex.Unlock()
	fake.GetByEmailStub = nil
	if fake.getByEmailReturnsOnCall == nil {
		fake.getByEmailReturnsOnCall = make(map[int]struct {
			result1 *cmmongo.User
			result2 error
		})
	}
	fake.getByEmailReturnsOnCall[i] = struct {
		result1 *cmmongo.User
		result2 error
	}{result1, result2}
}

func (fake *FakeUsersData) New(arg1 context.Context, arg2 string, arg3 cmmongo.User) (string, error) {
	fake.newMutex.Lock()
	ret, specificReturn := fake.newReturnsOnCall[len(fake.newArgsForCall)]
	fake.newArgsForCall = append(fake.newArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 cmmongo.User
	}{arg1, arg2, arg3})
	stub := fake.NewStub
	fakeReturns := fake.newReturns
	fake.recordInvocation("New", []interface{}{arg1, arg2, arg3})
	fake.newMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeUsersData) NewCallCount() int {
	fake.newMutex.RLock()
	defer fake.newMutex.RUnlock()
	return len(fake.newArgsForCall)
}

func (fake *FakeUsersData) NewCalls(stub func(context.Context, string, cmmongo.User) (string, error)) {
	fake.newMutex.Lock()
	defer fake.newMutex.Unlock()
	fake.NewStub = stub
}

func (fake *FakeUsersData) NewArgsForCall(i int) (context.Context, string, cmmongo.User) {
	fake.newMutex.RLock()
	defer fake.newMutex.RUnlock()
	argsForCall := fake.newArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeUsersData) NewReturns(result1 string, result2 error) {
	fake.newMutex.Lock()
	defer fake.newMutex.Unlock()
	fake.NewStub = nil
	fake.newReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeUsersData) NewReturnsOnCall(i int, result1 string, result2 error) {
	fake.newMutex.Lock()
	defer fake.newMutex.Unlock()
	fake.NewStub = nil
	if fake.newReturnsOnCall == nil {
		fake.newReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.newReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeUsersData) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.editMutex.RLock()
	defer fake.editMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.getAllMutex.RLock()
	defer fake.getAllMutex.RUnlock()
	fake.getByEmailMutex.RLock()
	defer fake.getByEmailMutex.RUnlock()
	fake.newMutex.RLock()
	defer fake.newMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUsersData) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
